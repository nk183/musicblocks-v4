{"version":3,"sources":["components/editor/view/components/index.tsx","components/editor/view/resources/close.svg","components/editor/core/index.ts","components/editor/view/components/button/index.tsx","components/editor/view/resources/help.svg","components/editor/view/resources/build.svg","components/editor/view/resources/code.svg","components/editor/view/index.ts","components/editor/index.ts"],"names":["_editor","_codeBox","_btnHelp","_status","_btnBuild","_btnClose","_helpBox","_mountedCallback","Editor","codeBoxRef","useRef","btnHelpRef","statusRef","btnBuildRef","btnCloseRef","helpBoxRef","useState","showingHelp","setShowingHelp","useEffect","current","addEventListener","svgHelp","svgBuild","svgClose","forEach","svgSrc","button","fetch","then","res","text","svg","innerHTML","className","id","ref","onInput","onClick","dispatchEvent","CustomEvent","detail","value","readOnly","setup","container","Promise","resolve","ReactDOM","render","requestAnimationFrame","setCode","setStatus","setHelp","resetStates","Event","generateAPI","snapshot","getSpecificationSnapshot","api","Object","entries","filter","specification","type","includes","category","elementName","instanceID","addInstance","instance","getInstance","args","argLabels","map","arg","getArgType","join","removeInstance","push","name","types","buildProgram","code","lines","split","units","length","checkValidity","generateSnapshot","process","routine","crumbs","crumb","addInstruction","argMap","slice","unit","param","generateFromSnapshot","transpile","e","console","log","resetProgram","resetSyntaxTree","registerElementSpecificationEntries","librarySpecification","_container","_svgCode","_svgClose","loadSrc","a","all","svgCode","setButtonImg","icon","_editorToolbarBtn","document","createElement","setupComponent","response","createItem","location","position","setupButton","getElement","element","setButtonState","state","mount","setupView","menu","getComponent","mountHook","btn","setState","_state","unsetToolbarExtended","toolbarContent","setToolbarExtended","pin","unpin","editor","appendChild"],"mappings":"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","file":"static/js/2.fe756d50.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// -- resources ------------------------------------------------------------------------------------\n\nimport svgHelp from '../resources/help.svg';\nimport svgBuild from '../resources/build.svg';\nimport svgClose from '../resources/close.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _editor: HTMLDivElement;\nlet _codeBox: HTMLTextAreaElement;\nlet _btnHelp: HTMLButtonElement;\nlet _status: HTMLParagraphElement;\nlet _btnBuild: HTMLButtonElement;\nlet _btnClose: HTMLButtonElement;\nlet _helpBox: HTMLTextAreaElement;\n\nlet _mountedCallback: CallableFunction;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Editor component.\n * @returns root JSX element of the Editor component\n */\nfunction Editor(): JSX.Element {\n  const codeBoxRef = useRef(null);\n  const btnHelpRef = useRef(null);\n  const statusRef = useRef(null);\n  const btnBuildRef = useRef(null);\n  const btnCloseRef = useRef(null);\n  const helpBoxRef = useRef(null);\n\n  const [showingHelp, setShowingHelp] = useState(false);\n\n  useEffect(() => {\n    _codeBox = codeBoxRef.current!;\n    _btnHelp = btnHelpRef.current!;\n    _status = statusRef.current!;\n    _btnBuild = btnBuildRef.current!;\n    _btnClose = btnCloseRef.current!;\n    _helpBox = helpBoxRef.current!;\n\n    _mountedCallback();\n\n    _editor.addEventListener('resetstates', () => {\n      setShowingHelp(false);\n    });\n\n    (\n      [\n        [svgHelp, _btnHelp],\n        [svgBuild, _btnBuild],\n        [svgClose, _btnClose],\n      ] as [string, HTMLButtonElement][]\n    ).forEach(([svgSrc, button]) => {\n      fetch(svgSrc)\n        .then((res) => res.text())\n        .then((svg) => (button.innerHTML = svg));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className={`editor-wrapper ${showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea\n          id=\"editor-codebox\"\n          ref={codeBoxRef}\n          onInput={() => (_status.innerHTML = '')}\n        ></textarea>\n        <div id=\"editor-console\">\n          <button\n            id=\"editor-btn-help\"\n            ref={btnHelpRef}\n            onClick={() => setShowingHelp(true)}\n          ></button>\n          <div id=\"editor-status-wrapper\">\n            <p id=\"editor-status\" ref={statusRef}></p>\n          </div>\n          <button\n            id=\"editor-btn-build\"\n            ref={btnBuildRef}\n            onClick={() =>\n              _editor.dispatchEvent(\n                new CustomEvent<string>('buildprogram', {\n                  detail: _codeBox.value,\n                }),\n              )\n            }\n          ></button>\n        </div>\n      </div>\n      <div className={`editor-wrapper ${!showingHelp ? 'editor-wrapper-hidden' : ''}`}>\n        <textarea id=\"editor-help\" ref={helpBoxRef} readOnly></textarea>\n        <button\n          id=\"editor-help-close\"\n          ref={btnCloseRef}\n          onClick={() => setShowingHelp(false)}\n        ></button>\n      </div>\n    </>\n  );\n}\n\n/**\n * Mounts the React component inside the DOM container.\n * @param container DOM container\n * @returns a `Promise` of an object containing the DOM artboard and interactor elements\n */\nexport function setup(container: HTMLElement): Promise<void> {\n  return new Promise((resolve) => {\n    _editor = container as HTMLDivElement;\n    _editor.id = 'editor';\n\n    ReactDOM.render(<Editor />, container);\n\n    _mountedCallback = () => requestAnimationFrame(() => resolve());\n  });\n}\n\n/**\n * Sets the text code content of the codebox.\n * @param text text code content\n */\nexport function setCode(text: string): void {\n  _codeBox.value = text;\n}\n\n/**\n * Sets the text content of the status box.\n * @param text text content\n */\nexport function setStatus(text: string): void {\n  _status.innerHTML = text;\n}\n\n/**\n * Sets the text content of the help box.\n * @param text text content\n */\nexport function setHelp(text: string): void {\n  _helpBox.innerHTML = text;\n}\n\n/**\n * Resets the component states.\n */\nexport function resetStates(): void {\n  _editor.dispatchEvent(new Event('resetstates'));\n}\n","export default __webpack_public_path__ + \"static/media/close.b6f9ced0.svg\";","/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport {\n    ITreeSnapshotInput,\n    generateFromSnapshot,\n    generateSnapshot,\n    registerElementSpecificationEntries,\n    resetSyntaxTree,\n    getSpecificationSnapshot,\n} from '@sugarlabs/musicblocks-v4-lib';\n\nimport {\n    addInstance,\n    getInstance,\n    removeInstance,\n} from '@sugarlabs/musicblocks-v4-lib/syntax/warehouse/warehouse';\n\nimport { librarySpecification } from '@sugarlabs/musicblocks-v4-lib';\nregisterElementSpecificationEntries(librarySpecification);\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Generates the API for the loaded specification.\n * @returns list of valid instruction signatures\n */\nexport function generateAPI(): string {\n    const snapshot = getSpecificationSnapshot();\n    const api: string[] = [];\n\n    Object.entries(snapshot)\n        .filter(\n            ([_, specification]) =>\n                specification.type === 'Statement' &&\n                ['Graphics', 'Pen'].includes(specification.category),\n        )\n        .forEach(([elementName, _]) => {\n            const instanceID = addInstance(elementName);\n            const instance = getInstance(instanceID)!.instance;\n            const args: [string, string][] = instance.argLabels.map((arg) => [\n                arg,\n                instance.getArgType(arg).join('|'),\n            ]);\n            removeInstance(instanceID);\n\n            api.push(`${elementName} ${args.map(([name, types]) => `${name}:${types}`).join(' ')}`);\n        });\n\n    return api.join('\\n');\n}\n\n/**\n * Validates code, transpiles it, and generates the Syntax Tree in the Programming Engine.\n * @param code editor's code\n * @returns a `Promise` that returns whether the process was successful\n */\nexport function buildProgram(code: string): Promise<boolean> {\n    function checkValidity(): boolean {\n        /*\n         * dummy logic\n         */\n        const lines = code.split('\\n');\n        for (const line of lines) {\n            const units = line.split(' ');\n            if (\n                !(\n                    units.length === 1 ||\n                    units.length === 2 ||\n                    units.length === 3 ||\n                    (units.length === 4 && units[0] === '' && units[1] === '')\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function transpile(): void {\n        // dummy program build (for debugging)\n        // import('./dummy');\n\n        const snapshot: ITreeSnapshotInput = { process: [], routine: [], crumbs: [[]] };\n        const crumb = snapshot.crumbs[0];\n\n        const addInstruction = (units: string[]) => {\n            const elementName = units[0];\n            const argMap = {};\n\n            let args: [string, string][] = units\n                .slice(1)\n                .map((unit) => unit.split(':') as [string, string]);\n            args.forEach(([param, value]) => {\n                // @ts-ignore\n                argMap[param] = {\n                    elementName: 'value-number',\n                    value,\n                };\n            });\n\n            crumb.push({\n                elementName,\n                argMap,\n            });\n        };\n\n        for (const line of code.split('\\n')) {\n            const units = line.split(' ');\n            addInstruction(units);\n        }\n\n        generateFromSnapshot(snapshot);\n    }\n\n    return new Promise((resolve) => {\n        if (checkValidity() === false) {\n            resolve(false);\n        } else {\n            const snapshot = generateSnapshot();\n            try {\n                transpile();\n                resolve(true);\n            } catch (e) {\n                console.log(e);\n                generateFromSnapshot(snapshot);\n                resolve(false);\n            }\n        }\n    });\n}\n\n/**\n * Resets the program — generates an empty Syntax Tree.\n */\nexport function resetProgram(): void {\n    resetSyntaxTree();\n}\n","// -- resources ------------------------------------------------------------------------------------\n\nimport svgCode from '../../resources/code.svg';\nimport svgClose from '../../resources/close.svg';\n\n// -- stylesheet -----------------------------------------------------------------------------------\n\nimport './index.scss';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _container: HTMLElement;\nlet _svgCode: string;\nlet _svgClose: string;\n\n// -- component definition -------------------------------------------------------------------------\n\n/**\n * Loads the SVG icons for the editor's toolbar button.\n * @param container DOM element of the editor's toolbar button\n */\nexport function setup(container: HTMLElement): void {\n  container.id = 'editor-toolbar-btn';\n  _container = container;\n\n  const loadSrc = async (svgSrc: string): Promise<string> => {\n    const svg = await fetch(svgSrc).then((res) => res.text());\n    return new Promise((resolve) => {\n      resolve(svg);\n    });\n  };\n\n  Promise.all([loadSrc(svgCode), loadSrc(svgClose)]).then(([svgCode, svgClose]) => {\n    [_svgCode, _svgClose] = [svgCode, svgClose];\n\n    setButtonImg('code');\n  });\n}\n\n/**\n * Sets the SVG icon for the editor's toolbar button.\n * @param icon icon name\n */\nexport function setButtonImg(icon: 'code' | 'cross'): void {\n  _container.innerHTML = icon === 'code' ? _svgCode : _svgClose;\n}\n","export default __webpack_public_path__ + \"static/media/help.70105245.svg\";","export default __webpack_public_path__ + \"static/media/build.8283c240.svg\";","export default __webpack_public_path__ + \"static/media/code.3211ece1.svg\";","import { createItem } from '@/view';\nimport { buildProgram } from '../core';\n\nimport { setStatus, setup as setupComponent } from './components';\nimport { setButtonImg, setup as setupButton } from './components/button';\n\n// -- private variables ----------------------------------------------------------------------------\n\nlet _editor: HTMLDivElement;\nlet _editorToolbarBtn: HTMLElement;\n\n// -- private functions ----------------------------------------------------------------------------\n\n/**\n * Creates the DOM of the editor.\n */\nfunction _createEditor(): Promise<void> {\n    return new Promise((resolve) => {\n        _editor = document.createElement('div');\n\n        setupComponent(_editor).then(() => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            _editor.addEventListener('buildprogram', function (e: CustomEvent<string>) {\n                buildProgram(e.detail).then((response) =>\n                    setStatus(response ? 'Successfully Built' : 'Invalid Code'),\n                );\n            });\n\n            resolve();\n        });\n    });\n}\n\n/**\n * Creates the DOM of the editor's toolbar button.\n */\nfunction _createToolbarButton(): Promise<void> {\n    return new Promise((resolve) => {\n        _editorToolbarBtn = createItem({\n            location: 'toolbar',\n            type: 'button',\n            position: 'cluster-a',\n        });\n        setupButton(_editorToolbarBtn);\n        requestAnimationFrame(() => resolve());\n    });\n}\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Sets up the DOM elements.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        (async () => {\n            await _createEditor();\n            await _createToolbarButton();\n            resolve();\n        })();\n    });\n}\n\n/**\n * Returns the individual DOM components.\n * @param element toolbar button or editor\n * @returns queried DOM component\n */\nexport function getElement(element: 'button' | 'editor'): HTMLElement {\n    return element === 'button' ? _editorToolbarBtn : _editor;\n}\n\n/**\n * Sets the icon for the editor's toolbar button based on whether it is clicked or not.\n * @param state `clicked` or `unclicked`\n */\nexport function setButtonState(state: 'clicked' | 'unclicked'): void {\n    setButtonImg(state === 'clicked' ? 'cross' : 'code');\n}\n\nexport { setCode, setHelp, setStatus, resetStates } from './components';\n","import { IComponentMenu } from '@/@types/components/menu';\n\nimport { getComponent } from '@/config';\nimport { setToolbarExtended, unsetToolbarExtended } from '@/view';\n\nimport {\n    getElement,\n    resetStates,\n    setButtonState,\n    setCode,\n    setHelp,\n    setStatus,\n    setup as setupView,\n} from './view';\nimport { generateAPI, resetProgram } from './core';\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Mounts the UI components.\n */\nexport function mount(): Promise<void> {\n    return new Promise((resolve) => {\n        (async () => {\n            await setupView();\n            resolve();\n        })();\n    });\n}\n\n/**\n * Initializes the component.\n */\nexport function setup(): Promise<void> {\n    return new Promise((resolve) => {\n        const menu = getComponent('menu');\n        if (menu) {\n            (menu as IComponentMenu).mountHook('reset', () => {\n                setStatus('');\n                resetProgram();\n            });\n        }\n\n        setCode(`set-thickness value:4\nset-color value:5\nrepeat times:6\n  move-forward steps:100\n  turn-right angle:60\nset-color value:9\nrepeat times:6\n  move-forward steps:100\n  turn-left angle:60`);\n\n        setCode(`set-thickness value:4\nset-color value:5\nmove-forward steps:100\nturn-right angle:60\nmove-forward steps:100\nturn-right angle:60\nmove-forward steps:100\nturn-right angle:60\nmove-forward steps:100\nturn-right angle:60`);\n\n        setHelp(generateAPI());\n\n        const btn = getElement('button');\n\n        let state: 'initial' | 'float' | 'pinned' = 'initial';\n\n        const setState = (_state: 'initial' | 'float' | 'pinned') => {\n            if (_state === 'initial') {\n                unsetToolbarExtended();\n                resetStates();\n            } else {\n                const toolbarContent = setToolbarExtended('Editor', _state, {\n                    pin: () => setState('pinned'),\n                    unpin: () => setState('float'),\n                });\n                const editor = getElement('editor');\n                toolbarContent.appendChild(editor);\n            }\n            state = _state;\n        };\n\n        btn.addEventListener('click', () => {\n            if (state === 'initial') {\n                setButtonState('clicked');\n                setState('float');\n            } else {\n                setButtonState('unclicked');\n                setState('initial');\n            }\n        });\n\n        resolve();\n    });\n}\n"],"sourceRoot":""}